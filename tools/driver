#!/usr/bin/env python3
import argparse
from typing import Sequence
from subprocess import Popen, PIPE, run, DEVNULL

from modify_alias.modify_alias import (get_count_may_alias_queries,
                                       execute_with_modifications, get_ll_file,
                                       compile_file, measure_outputsize)


class InteractiveAliasAnalysisDriver:
    args: argparse.Namespace
    """
    The argument parsers namespace which holds the parsed commandline
    attributes.
    """

    def register_all_arguments(self,
                               arg_parser: argparse.ArgumentParser) -> None:
        """
        Registers all the command line arguments that are used by this tool.

        Add other/additional arguments by overloading this function.
        """
        arg_parser.add_argument("input_file",
                                type=str,
                                nargs="?",
                                help="path to input file")

        arg_parser.add_argument(
            "-op",
            "--optpath",
            type=str,
            help="path to the opt binary",
            default="../llvm-project/build_interact/bin/opt")

        arg_parser.add_argument(
            "-cp",
            "--compilerpath",
            type=str,
            help="path to the compiler binary (needs to understand LLVM IR)",
            default="../llvm-project/build_ast/bin/clang")

    def __init__(self,
                 description: str = 'xDSL modular optimizer driver',
                 args: Sequence[str] | None = None):

        # arg handling
        arg_parser = argparse.ArgumentParser(description=description)
        self.register_all_arguments(arg_parser)
        self.args = arg_parser.parse_args(args=args)

    def run(self) -> None:
        """
        Runs the tool.
        """
        get_ll_file(self.args.compilerpath, self.args.input_file)

        cmd = [self.args.optpath, '-Os', 'csmith/file2.ll', '-S']

        count = get_count_may_alias_queries(cmd)

        print("Count is " + str(count))

        for i in range(count):
            if not execute_with_modifications(cmd, i, 1):
                print("Modification failed for " + str(i))

        print("Done with modifications")

        # Compile groundtruth
        run([
            self.args.compilerpath, '-Os', 'csmith/file2.ll', '-o',
            "files_sache/file.out"
        ],
            stdout=DEVNULL,
            stderr=DEVNULL,
            text=True)

        for i in range(count):
            if i % 10 == 0:
                print("Compiling " + str(i))
            if not compile_file(i):
                print("Compilation failed for " + str(i))

        print("Done with compilation")

        # Measure groundtruth
        true_size = measure_outputsize("files_sache/file.out")
        print("True size is " + str(true_size))

        for i in range(count):
            size = measure_outputsize("files_sache/file" + str(i) + ".out")
            if size == -1:
                print("Size measurement failed for " + str(i))
            elif size != true_size:
                print(str(i) + ": " + str(size))


if __name__ == "__main__":
    InteractiveAliasAnalysisDriver().run()
